import speech_recognition as sr
from gtts import gTTS
import subprocess
from pathlib import Path
import sys
import time
import webbrowser




speakers = {
    'name':["alina","kolya","vlad","dima","andrey","pyetr"],
    "commands":{
        "greetings":["–ø—Ä–∏–≤–µ—Ç","–ø—Ä–∏–≤–µ—Ç–∏–∫","–∫—É","—Ö–∞–π"],
        "launch_google_chrome":["–∑–∞–ø—É—Å—Ç–∏ google chrome","–≤–∫–ª—é—á–∏ google chrome"],
        "launch_youtube":["–∑–∞–ø—É—Å–∫ youtube", "–∑–∞–ø—É—Å—Ç–∏ youtube","youtube","–≤–∫–ª—é—á–∏ youtube"],
        "google_query":["–Ω–∞–π–¥–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "—Ö–æ—á—É –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", "google"],
        "write_to_notes":['–∑–∞–ø–∏—à–∏ –∑–∞–º–µ—Ç–∫—É', '—Å–¥–µ–ª–∞–π –∑–∞–º–µ—Ç–∫—É','—Ö–æ—á—É –∑–∞–ø–æ–º–Ω–∏—Ç—å —Ñ—Ä–∞–∑—É','–Ω–∞–ø–∏—à–∏ –∑–∞–º–µ—Ç–∫—É'],
        "set_timer":["—É—Å—Ç–∞–Ω–æ–≤–∏ —Ç–∞–π–º–µ—Ä","–∑–∞—Å–µ–∫–∏ –≤—Ä–µ–º—è", "–∑–∞—Å–µ—á—å –≤—Ä–µ–º—è","–∑–∞—Å–µ–∫–∏ —Ç–∞–π–º–µ—Ä","—Ç–∞–π–º–µ—Ä"],
    }

           }
hour = "—á–∞—Å–∞"
minutes = "–º–∏–Ω—É—Ç"
second = "—Å–µ–∫—É–Ω–¥"
print(speakers["name"])
input_speaker = input("–≤–≤–µ–¥–∏—Ç–µ —Å–ø–∏–∫–µ—Ä–∞:").lower()



# –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∑–∞—Ö–≤–∞—Ç–∞ –∑–≤—É–∫–∞ –∏ –ø–µ—Ä–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ—á–∏ –≤ —Ç–µ–∫—Å—Ç
def command_pronunciations():
    recognizer = sr.Recognizer()
    try:
        with sr.Microphone() as source:
            print("–ì–æ–≤–æ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã/—á—Ç–æ –Ω–∞–¥–æ –∑–∞–ø–∏—Å–∞—Ç—å...")
            recognizer.adjust_for_ambient_noise(source)

            audio = recognizer.listen(source, phrase_time_limit=1.5)
            print("–†–∞—Å–ø–æ–∑–Ω–∞—é...")
            text = recognizer.recognize_google(audio, language="ru-RU").lower()
            print(text)
            return text
    except sr.UnknownValueError:
        print("–°–∫–∞–∂–∏—Ç–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –≥—Ä–æ–º—á–µ")

def file_not_found():
    speaker = Path(f"speakers/{input_speaker}/{input_speaker}_file_not_found.ogg")
    if speaker.exists():
        subprocess.run(["start", "", speaker.absolute()], shell=True)
        print("—ç—Ç–æ—Ç —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        exit()
    else:
        print("—ç—Ç–æ—Ç —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        exit()

def speak_speaker(actions: str):
    speaker = Path(f"speakers/{input_speaker}/{input_speaker}_{actions}.ogg")
    if speaker.exists():
        subprocess.run(["start", "", speaker.absolute()], shell=True)
    else:
        file_not_found()

def speaker_check(name_speaker):

    if input_speaker in speakers['name']:
        speak_speaker("hello")
        print(f"–í–∞—à —Å–ø–∏–∫–µ—Ä {input_speaker} –Ω–∞–π–¥–µ–Ω")
        time.sleep(4)



def launch_google_chrome():
    a = r"C:\Program Files\Google\Chrome\Application\chrome.exe"
    speak_speaker("launch_google_chrome")
    subprocess.Popen([a])


def write_to_notes():
    speak_speaker("write_to_notes")
    qwery = command_pronunciations()
    with open(r"notes/write_to_notes", "a", encoding="utf-8") as file:
        file.write(f"üî≥{qwery}\n")
        print(f"–í–∞—à–∞ –∑–∞–º–µ—Ç–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞")
        time.sleep(3)



def set_timer():
    speak_speaker("set_timer")
    qwery = command_pronunciations()
    list_ = []
    try:
        qwery = qwery.split(" ")
        h = 0
        for i in qwery:
            if i.isdigit():
                j = int(i)
                if qwery[h+1] in hour:
                    j *= 180
                    list_.append(j)
                    h += 2
                elif qwery[h+1] in minutes:
                    j *= 60
                    list_.append(j)
                    h += 2
                elif qwery[h+1] in second:
                    list_.append(j)
                    time_timer = sum(list_)
                    speak_speaker("set_timer")
                    time.sleep(time_timer)
                else:
                    print("–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ —Ç–∞–π–º–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ –ø–æ –ø—Ä–∏–º–µ—Ä—É: \n N —á–∞—Å–æ–≤ N –º–∏–Ω—É—Ç N —Å–µ–∫—É–Ω–¥")
    except TypeError:
        print("–û—à–∏–±–∫–∞ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥ —Ç–∞–π–º–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ –ø–æ –ø—Ä–∏–º–µ—Ä—É: \n N —á–∞—Å–æ–≤ N –º–∏–Ω—É—Ç N —Å–µ–∫—É–Ω–¥")

def launch_youtube():
    webbrowser.register('Google-chrome',None,webbrowser.BackgroundBrowser(r"C:\Program Files\Google\Chrome\Application\chrome.exe"))
    speak_speaker("launch_youtube")
    webbrowser.get("Google-chrome").open("youtube.com/")
    time.sleep(3)



def google_query():
    speak_speaker("google_query")
    qwery = command_pronunciations()
    webbrowser.register('Google-chrome', None,
                        webbrowser.BackgroundBrowser(r"C:\Program Files\Google\Chrome\Application\chrome.exe"))
    webbrowser.get("Google-chrome").open(f"https://www.google.com/search?q=%D1%8F{qwery}")
    time.sleep(3)

def greetings():
    speak_speaker("greetings")



def main():
    qwery = command_pronunciations()
    for k,v in speakers["commands"].items():
        if qwery in v:
            globals()[k]()
        print("–ù–∏—á–µ–≥–æ –Ω–µ—Ç—É")

if __name__ == '__main__':
    speaker_check(input_speaker)
    main()



